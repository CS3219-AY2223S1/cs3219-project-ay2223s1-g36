name: Build and Deploy to Cloud Run

on:
  push:

env:
  PROJECT_ID: peerprep-366106 
  GAR_LOCATION: asia-southeast1 
  REPOSITORY: peerprep 
  REGION: asia-southeast1 
  CD_BRANCH: production

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      matching-service: ${{ steps.filter.outputs.matching-service }}
      collab-service: ${{ steps.filter.outputs.collab-service }}
      user-service: ${{ steps.filter.outputs.user-service }}
      question-service: ${{ steps.filter.outputs.question-service }}
      history-service: ${{ steps.filter.outputs.history-service }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: production
        filters: |
          matching-service:
            - 'matching-service/**'
          collab-service:
            - 'collab-service/**'
          user-service:
            - 'user-service/**'
          question-service:
            - 'question-service/**'
          history-service:
            - 'history-service/**'
          frontend:
            - 'frontend/**'

  test-matching-service:
    needs: changes
    if: ${{ needs.changes.outputs.matching-service == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: test
        run: docker-compose -f matching-service/docker-compose.yaml run --rm test

  deploy-matching-service:
    needs: test-matching-service
    if: ${{ github.ref == format('refs/heads/{0}', github.env.CD_BRANCH) }}
    runs-on: ubuntu-latest
    env:
      SERVICE: matching-service 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          # https://stackoverflow.com/questions/51214792/defining-sequelize-on-google-cloud-sql-nodejs
          env_vars: |
            NODE_ENV=production
            QUESTION_SERVICE_URL=https://question-service-lpaj6pcqsa-as.a.run.app
            DB_USER=postgres
            DB_NAME=postgres
            PROD_SQL_DIALECT=postgres
            PROD_SQL_HOST=/cloudsql/peerprep-366106:asia-southeast1:cs3219-matching-postgres
          secrets: |
            DB_PASSWORD=peerprep_matching_sql_pw:latest

  deploy-question-service:
    needs: changes
    if: ${{ needs.changes.outputs.question-service == 'true' }}
    runs-on: ubuntu-latest
    env:
      SERVICE: question-service 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            CORS_ORIGIN=https://matching-service-lpaj6pcqsa-as.a.run.app|https://frontend-lpaj6pcqsa-as.a.run.app
          secrets: |
            DB_CLOUD_URI=QNS_SERVICE_MONGO_URL:latest

  deploy-user-service:
    needs: changes
    if: ${{ needs.changes.outputs.user-service == 'true' }}
    runs-on: ubuntu-latest
    env:
      SERVICE: user-service 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            CORS_ORIGIN=https://frontend-lpaj6pcqsa-as.a.run.app
          secrets: |
            DB_CLOUD_URI=USER_SERVICE_MONGO_URL:latest
            TOKEN_KEY=USER_SERVICE_JWT_TOKEN:latest

  deploy-collab-service:
    needs: changes
    if: ${{ needs.changes.outputs.collab-service == 'true' }}
    runs-on: ubuntu-latest
    env:
      SERVICE: collab-service 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
          secrets: |
            DB_CLOUD_URI=COLLAB_SERVICE_MONGO_URL:latest

  deploy-history-service:
    needs: changes
    if: ${{ needs.changes.outputs.history-service == 'true' }}
    runs-on: ubuntu-latest
    env:
      SERVICE: history-service 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            CORS_ORIGIN=https://frontend-lpaj6pcqsa-as.a.run.app
            MATCHING_SERVICE_URL=https://matching-service-lpaj6pcqsa-as.a.run.app
            COLLAB_SERVICE_URL=https://collab-service-lpaj6pcqsa-as.a.run.app
            QUESTION_SERVICE_URL=https://question-service-lpaj6pcqsa-as.a.run.app

  deploy-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    env:
      SERVICE: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.CLOUD_RUN_KEY }}'

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_KEY }}

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ${{ env.SERVICE }}
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}